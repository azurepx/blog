"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9320],{6981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(5893),o=t(1151);const r={title:"128. Longest Consecutive Sequence",tags:["array","hash table","sorting"]},c=void 0,i={id:"Leetcode/longest-consecutive-sequence/index",title:"128. Longest Consecutive Sequence",description:"Problem on Leetcode",source:"@site/docs/Leetcode/128-longest-consecutive-sequence/index.md",sourceDirName:"Leetcode/128-longest-consecutive-sequence",slug:"/Leetcode/longest-consecutive-sequence/",permalink:"/docs/Leetcode/longest-consecutive-sequence/",draft:!1,unlisted:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"hash table",permalink:"/docs/tags/hash-table"},{label:"sorting",permalink:"/docs/tags/sorting"}],version:"current",lastUpdatedAt:1707272221,formattedLastUpdatedAt:"Feb 7, 2024",frontMatter:{title:"128. Longest Consecutive Sequence",tags:["array","hash table","sorting"]},sidebar:"tutorialSidebar",previous:{title:"49. Group Anagrams",permalink:"/docs/Leetcode/group-anagram/"},next:{title:"202. Happy Number",permalink:"/docs/Leetcode/happy-number/"}},a={},l=[];function u(e){const n={a:"a",code:"code",em:"em",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/longest-consecutive-sequence/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/Difficulty-Medium-F5A9B8.svg",alt:"medium"}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(n.p,{children:"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence."}),"\n",(0,s.jsx)(n.p,{children:"You must write an algorithm that runs in O(n) time."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Example 1:"}),"*"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Input: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0 <= nums.length <= 105\n-109 <= nums[i] <= 109\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Method 1: \n// Time complexity: O(nlogn)\n// Space complexity: O(1) \n\nfunction longestConsecutive(nums: number[]): number {\n  if (nums.length <= 1) return nums.length;\n\n  nums.sort((a, b) => a - b); // O(nlogn)\n\n  let longestSeq = 1;\n  let seq = 1; \n  for (let i = 1; i < nums.length; i++) { // O(n)\n    if (nums[i] === nums[i - 1]) continue;\n    if (nums[i] === nums[i - 1] + 1) {\n      seq++;\n      longestSeq = Math.max(longestSeq, seq);\n    } else {\n      seq = 1;\n    }\n  }\n\n  return longestSeq;\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Method 2: using hash table\n// Time complexity: O(n)\n// Space complexity: O(n)\nfunction longestConsecutive(nums: number[]): number {\n  const set = new Set(nums);\n\n  let max = 0;\n  [...set].forEach(num => {\n    // find the start of the sequence\n    if (!set.has(num - 1)) {\n      let start = num;\n      let counter = 1;\n\n      // find the end of the sequence\n      while(set.has(++start)) counter++;\n\n      max = Math.max(max, counter);\n    }\n  }) \n\n  return max;\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Method 3: another hash table\n// Time complexity: O(n)\n// Space complexity: O(n)\nfunction longestConsecutive(nums: number[]): number {\n  const map = new Map;\n  let max = 0;\n\n  for (let num of nums) {\n    if (!map.has(num)) {\n      const left = map.get(num - 1) || 0;\n      const right = map.get(num + 1) || 0;\n      const sum = left + right + 1;\n      map.set(num, sum);\n      max = Math.max(max, sum);\n      map.set(num - left, sum);\n      map.set(num + right, sum);\n    }\n  }\n\n  return max;\n};\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>c});var s=t(7294);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);