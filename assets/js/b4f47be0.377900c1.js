"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8060],{5448:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var s=t(5893),r=t(1151);const i={title:"15. 3Sum",tags:["two pointers","array","hash table"]},o=void 0,u={id:"Leetcode/15-3sum/index",title:"15. 3Sum",description:"Problem on Leetcode",source:"@site/docs/Leetcode/15-3sum/index.md",sourceDirName:"Leetcode/15-3sum",slug:"/Leetcode/15-3sum/",permalink:"/docs/Leetcode/15-3sum/",draft:!1,unlisted:!1,tags:[{label:"two pointers",permalink:"/docs/tags/two-pointers"},{label:"array",permalink:"/docs/tags/array"},{label:"hash table",permalink:"/docs/tags/hash-table"}],version:"current",lastUpdatedAt:1710320757,formattedLastUpdatedAt:"Mar 13, 2024",frontMatter:{title:"15. 3Sum",tags:["two pointers","array","hash table"]},sidebar:"tutorialSidebar",previous:{title:"452. Minimum Number of Arrows to Burst Balloons",permalink:"/docs/Leetcode/minimum-number-of-arrows-to-burst-balloons/"}},l={},m=[];function a(n){const e={a:"a",code:"code",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://leetcode.com/problems/3sum/",children:(0,s.jsx)(e.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.img,{src:"https://img.shields.io/badge/Difficulty-Medium-F5A9B8.svg",alt:"medium"}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(e.p,{children:["Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and ",(0,s.jsx)(e.code,{children:"nums[i] + nums[j] + nums[k] == 0"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Notice that the solution set must not contain duplicate triplets."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Solutions"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"\n// Method 1: Two pointers\n// Time complexity: O(n^2)\n// Space complexity: O(1)\nfunction threeSum(nums: number[]): number[][] {\n  nums.sort((a, b) => a - b);\n  const result: number[][] = [];\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    if (i > 0 && nums[i] === nums[i - 1]) continue;\n    let left = i + 1;\n    let right = nums.length - 1;\n\n    while (left < right) {\n      const sum = nums[i] + nums[left] + nums[right];\n      if (sum === 0) {\n        result.push([nums[i], nums[left], nums[right]]);\n        while (left < right && nums[left] === nums[left + 1]) left++;\n        while (left < right && nums[right] === nums[right - 1]) right--;\n        left++;\n        right--;\n      } else if (sum < 0) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n\n  return result;\n};\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// Method 2: Using hash table\n// Time complexity: O(n^2)\n// Space complexity: O(n)\nfunction threeSum(nums: number[]): number[][] {\n  nums.sort((a, b) => a - b);\n  const result: number[][] = [];\n  const map = new Map<number, number>();\n\n  for (let i = 0; i < nums.length; i++) {\n    if (i > 0 && nums[i] === nums[i - 1]) continue; // skip duplicates\n    for (let j = i + 1; j < nums.length; j++) {\n      if (j > i + 1 && nums[j] === nums[j - 1]) continue; // skip duplicates\n      const complement = -nums[i] - nums[j];\n      if (map.has(complement) && map.get(complement) === i) {\n        result.push([nums[i], complement, nums[j]]);\n      }\n      map.set(nums[j], i);\n    }\n  }\n\n  return result;\n};\n"})})]})}function c(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(a,{...n})}):a(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>u,a:()=>o});var s=t(7294);const r={},i=s.createContext(r);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);