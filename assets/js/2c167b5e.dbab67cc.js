"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4054],{6552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>v,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(5893),i=t(1151);const s={title:"57. Insert Interval",tags:["array","two pointers","stack","interval"]},a=void 0,l={id:"Leetcode/insert-interval/index",title:"57. Insert Interval",description:"Problem on Leetcode",source:"@site/docs/Leetcode/57-insert-interval/index.md",sourceDirName:"Leetcode/57-insert-interval",slug:"/Leetcode/insert-interval/",permalink:"/docs/Leetcode/insert-interval/",draft:!1,unlisted:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"two pointers",permalink:"/docs/tags/two-pointers"},{label:"stack",permalink:"/docs/tags/stack"},{label:"interval",permalink:"/docs/tags/interval"}],version:"current",lastUpdatedAt:1711686728,formattedLastUpdatedAt:"Mar 29, 2024",frontMatter:{title:"57. Insert Interval",tags:["array","two pointers","stack","interval"]},sidebar:"tutorialSidebar",previous:{title:"56. Merge Intervals",permalink:"/docs/Leetcode/merge-intervals/"},next:{title:"73. Set Matrix Zeroes",permalink:"/docs/Leetcode/set-matrix-zeroes/"}},o={},c=[];function d(e){const n={a:"a",code:"code",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/insert-interval/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/Difficulty-Medium-F5A9B8.svg",alt:"medium"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.p,{children:"You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval."}),"\n",(0,r.jsx)(n.p,{children:"Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary)."}),"\n",(0,r.jsx)(n.p,{children:"Return intervals after the insertion."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"0 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <= endi <= 105\nintervals is sorted by starti in ascending order.\nnewInterval.length == 2\n0 <= start <= end <= 105\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Method 1: Using stack\n// Time Complexity: O(n)\n// Space Complexity: O(1)\nfunction insert(intervals: number[][], newInterval: number[]): number[][] {\n  let p = 0;\n  let length = intervals.length;\n  while (p < length) {\n    if (newInterval[0] <= intervals[p][0]) {\n      let i = intervals.length;\n      while (p < i) {\n        intervals[i] = intervals[i - 1];\n        i--;\n      }\n      intervals[p] = newInterval;\n      break;\n    }\n    p++;\n  }\n\n  if (length === intervals.length) intervals.push(newInterval);\n\n  return merge(intervals);\n};\n\nconst merge = (intervals: number[][]): number[][] => {\n  let res = [];\n\n  for (let i = 0; i < intervals.length; i++) {\n    if (i === 0) {\n      res.push(intervals[i]);\n      continue;\n    }\n\n    let top = res[res.length - 1];\n    if (top[1] < intervals[i][0]) {\n      res.push(intervals[i]);\n    } else {\n      top[1] = Math.max(top[1], intervals[i][1]);\n    }\n  }\n\n  return res;\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Method 2: Using two pointers\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\nfunction insert(intervals: number[][], newInterval: number[]): number[][] {\n  let res = [];\n  let i = 0;\n  while (i < intervals.length && intervals[i][1] < newInterval[0]) {\n    res.push(intervals[i]);\n    i++;\n  }\n\n  while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n    newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n    newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n    i++;\n  }\n\n  res.push(newInterval);\n\n  while (i < intervals.length) {\n    res.push(intervals[i]);\n    i++;\n  }\n\n  return res;\n};\n"})})]})}function v(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var r=t(7294);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);