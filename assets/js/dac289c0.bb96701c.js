"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9827],{4658:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=t(5893),s=t(1151);const r={title:"452. Minimum Number of Arrows to Burst Balloons",tags:["array","interval","stack","greedy"]},i=void 0,a={id:"Leetcode/minimum-number-of-arrows-to-burst-balloons/index",title:"452. Minimum Number of Arrows to Burst Balloons",description:"Problem on Leetcode",source:"@site/docs/Leetcode/452-minimum-number-of-arrows-to-burst-balloons/index.md",sourceDirName:"Leetcode/452-minimum-number-of-arrows-to-burst-balloons",slug:"/Leetcode/minimum-number-of-arrows-to-burst-balloons/",permalink:"/docs/Leetcode/minimum-number-of-arrows-to-burst-balloons/",draft:!1,unlisted:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"interval",permalink:"/docs/tags/interval"},{label:"stack",permalink:"/docs/tags/stack"},{label:"greedy",permalink:"/docs/tags/greedy"}],version:"current",lastUpdatedAt:1711686030,formattedLastUpdatedAt:"Mar 29, 2024",frontMatter:{title:"452. Minimum Number of Arrows to Burst Balloons",tags:["array","interval","stack","greedy"]},sidebar:"tutorialSidebar",previous:{title:"392. Is Subsequence",permalink:"/docs/Leetcode/is-subsequence/"},next:{title:"1528. Shuffle String",permalink:"/docs/Leetcode/shuffle-string/"}},l={},c=[];function d(n){const e={a:"a",code:"code",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/Difficulty-Medium-F5A9B8.svg",alt:"medium"}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(e.p,{children:["There are some spherical balloons taped onto a flat wall that represents the ",(0,o.jsx)(e.code,{children:"XY-plane"}),". The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact ",(0,o.jsx)(e.code,{children:"y-coordinates"})," of the balloons."]}),"\n",(0,o.jsxs)(e.p,{children:["Arrows can be shot up directly vertically (in the positive ",(0,o.jsx)(e.code,{children:"y-direction"}),") from different points along the ",(0,o.jsx)(e.code,{children:"x-axis"}),". A balloon with xstart and xend is burst by an arrow shot at x if ",(0,o.jsx)(e.code,{children:"xstart <= x <= xend"}),". There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path."]}),"\n",(0,o.jsx)(e.p,{children:"Given the array points, return the minimum number of arrows that must be shot to burst all balloons."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: points = [[1,2],[3,4],[5,6],[7,8]]\nOutput: 4\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Example 3:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Input: points = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"1 <= points.length <= 105\npoints[i].length == 2\n-231 <= xstart < xend <= 231 - 1\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Solutions"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"// Method 1: Using stack\n// Time Complexity: O(nlogn)\n// Space Complexity: O(n);\nfunction findMinArrowShots(points: number[][]): number {\n  points.sort((a, b) => a[0] - b[0]);\n\n  let list = [];\n  for (let i = 0; i < points.length; i++) {\n    if (i === 0) {\n      list.push(points[i]);\n      continue;\n    }\n\n    let top = list[list.length - 1];\n    if (top[1] < points[i][0]) {\n      list.push(points[i]);\n    } else {\n      top[0] = Math.max(top[0], points[i][0]);\n      top[1] = Math.min(top[1], points[i][1]);\n    }\n  }\n  \n  return list.length;\n};\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:"// Method 2: greedy\n// Time Complexity: O(nlogn)\n// Space Complexity: O(1);\nfunction findMinArrowShots(points: number[][]): number {\n  points.sort((a, b) => a[1] - b[1]);\n\n  let count = 1;\n  let end = points[0][1];\n  for (let i = 1; i < points.length; i++) {\n    if (points[i][0] > end) {\n      count++;\n      end = points[i][1];\n    }\n  }\n  \n  return count;\n};\n"})})]})}function p(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>i});var o=t(7294);const s={},r=o.createContext(s);function i(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);