"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[930],{8071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(5893),s=t(1151);const i={title:"167. Two Sum II - Input array is sorted",tags:["array","hash table","two pointers","binary search"]},a=void 0,o={id:"Leetcode/two-sum-ii-input-array-sorted/index",title:"167. Two Sum II - Input array is sorted",description:"Problem on Leetcode",source:"@site/docs/Leetcode/167-two-sum-ii-input-array-sorted/index.md",sourceDirName:"Leetcode/167-two-sum-ii-input-array-sorted",slug:"/Leetcode/two-sum-ii-input-array-sorted/",permalink:"/docs/Leetcode/two-sum-ii-input-array-sorted/",draft:!1,unlisted:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"hash table",permalink:"/docs/tags/hash-table"},{label:"two pointers",permalink:"/docs/tags/two-pointers"},{label:"binary search",permalink:"/docs/tags/binary-search"}],version:"current",lastUpdatedAt:1709279375,formattedLastUpdatedAt:"Mar 1, 2024",frontMatter:{title:"167. Two Sum II - Input array is sorted",tags:["array","hash table","two pointers","binary search"]},sidebar:"tutorialSidebar",previous:{title:"128. Longest Consecutive Sequence",permalink:"/docs/Leetcode/longest-consecutive-sequence/"},next:{title:"202. Happy Number",permalink:"/docs/Leetcode/happy-number/"}},d={},l=[];function u(e){const n={a:"a",code:"code",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/Difficulty-Medium-F5A9B8.svg",alt:"medium"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(n.p,{children:["Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] ",(0,r.jsx)(n.code,{children:"where 1 <= index1 < index2 <= numbers.length1"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2."}),"\n",(0,r.jsx)(n.p,{children:"The tests are generated such that there is exactly one solution. You may not use the same element twice."}),"\n",(0,r.jsx)(n.p,{children:"Your solution must use only constant extra space."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"2 <= numbers.length <= 3 * 104\n-1000 <= numbers[i] <= 1000\nnumbers is sorted in non-decreasing order.\n-1000 <= target <= 1000\nThe tests are generated such that there is exactly one solution.\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Method 1: hash table\n// Time complexity: O(n)\n// Space complexity: O(n)\nfunction twoSum(numbers: number[], target: number): number[] {\n  const map = new Map;\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      return [map.get(numbers[i]) + 1, i + 1];\n    } else {\n      map.set(target - numbers[i], i);\n    }\n  }   \n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Method 2: two pointers\n// Time complexity: O(n)\n// Space complexity: O(1)\nfunction twoSum(numbers: number[], target: number): number[] {\n  let [left, right] = [0, numbers.length - 1];\n  while (left < right) {\n    while (numbers[left] + numbers[right] > target) right--;\n    while (numbers[left] + numbers[right] < target) left++;\n    if (numbers[left] + numbers[right] === target) break;\n  }\n\n  return [left + 1, right + 1];\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Method 3: binary search\n// Time complexity: O(nlogn)\n// Space complexity: O(1)\nfunction twoSum(numbers: number[], target: number): number[] {\n  for (let i = 0; i < numbers.length; i++) {\n    let left = i + 1, right = numbers.length - 1;\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n      if (numbers[mid] === target - numbers[i]) {\n        return [i + 1, mid + 1];\n      } else if (numbers[mid] < target - numbers[i]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n};\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var r=t(7294);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);