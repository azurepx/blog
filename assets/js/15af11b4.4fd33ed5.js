"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4848],{5655:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=t(5893),i=t(1151);const r={title:"36. Valid Sudoku",tags:["array","hash table"]},s=void 0,a={id:"Leetcode/valid-sudoku/index",title:"36. Valid Sudoku",description:"Problem on Leetcode",source:"@site/docs/Leetcode/36-valid-sudoku/index.md",sourceDirName:"Leetcode/36-valid-sudoku",slug:"/Leetcode/valid-sudoku/",permalink:"/docs/Leetcode/valid-sudoku/",draft:!1,unlisted:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"hash table",permalink:"/docs/tags/hash-table"}],version:"current",lastUpdatedAt:1711686030,formattedLastUpdatedAt:"Mar 29, 2024",frontMatter:{title:"36. Valid Sudoku",tags:["array","hash table"]},sidebar:"tutorialSidebar",previous:{title:"11. Container With Most Water",permalink:"/docs/Leetcode/container-with-most-water/"},next:{title:"48. Rotate Image",permalink:"/docs/Leetcode/rotate-image/"}},l={},d=[];function c(e){const n={a:"a",code:"code",em:"em",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://leetcode.com/problems/valid-sudoku/",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Difficulty-Medium-F5A9B8.svg",alt:"medium"}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(n.p,{children:"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:"}),"\n",(0,o.jsxs)(n.p,{children:["Each row must contain the digits ",(0,o.jsx)(n.code,{children:"1-9"})," without repetition."]}),"\n",(0,o.jsxs)(n.p,{children:["Each column must contain the digits ",(0,o.jsx)(n.code,{children:"1-9"})," without repetition."]}),"\n",(0,o.jsxs)(n.p,{children:["Each of the nine ",(0,o.jsx)(n.code,{children:"3 x 3"})," sub-boxes of the grid must contain the digits ",(0,o.jsx)(n.code,{children:"1-9"})," without repetition."]}),"\n",(0,o.jsx)(n.p,{children:"Note:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A Sudoku board (partially filled) could be valid but is not necessarily solvable."}),"\n",(0,o.jsx)(n.li,{children:"Only the filled cells need to be validated according to the mentioned rules."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Example 1:"}),"*"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"alt text",src:t(8450).Z+"",width:"250",height:"250"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: board = \n[["5","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\nOutput: true\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Input: board = \n[["8","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\n\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\'s in the top left 3x3 sub-box, it is invalid.\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"board.length == 9\nboard[i].length == 9\nboard[i][j] is a digit 1-9 or '.'.\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solutions"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Method 1: brute force\n// Time complexity: O(n)\n// Space complexity: O(1)\n\nfunction isValidSudoku(board: string[][]): boolean {\n  return validateAllRows(board) &&\n        validateAllCols(board) &&\n        validateAllSubBoards(board)\n};\n\nconst isNumber = (num: string): boolean => {\n  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  return numbers.some(str => str === num);\n}\n\nconst validateMatrix = (x: number, y: number, p: number, q: number, board: string[][]): boolean => {\n  const numSet = new Set;\n  for (let i = x; i <= p; i++) {\n    for (let j = y; j <= q; j++) {\n      if (isNumber(board[i][j])) {\n        if (numSet.has(board[i][j])) return false;\n        else numSet.add(board[i][j]);\n      }\n    }\n  }\n\n  return true;\n}\n\nconst validateAllRows = (board: string[][]): boolean => {\n  for (let i = 0; i < board.length; i++) {\n    if (!validateMatrix(0, i, board.length - 1, i, board)) return false;\n  }  \n\n  return true;\n}\n\nconst validateAllCols = (board: string[][]): boolean => {\n  for (let i = 0; i < board.length; i++) {\n    if (!validateMatrix(i, 0, i, board.length - 1, board)) return false;\n  }\n\n  return true;\n}\n\nconst validateAllSubBoards = (board: string[][]): boolean => {\n  for (let i = 0; i < board.length; i = i + 3) {\n    for (let j = 0; j < board.length; j = j + 3) {\n      if (!validateMatrix(i, j, i + 2, j + 2, board)) return false;\n    }\n  }\n\n  return true;\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Method 2: Using a set\n// Time complexity: O(n)\n// Space complexity: O(1)\n\nfunction isValidSudoku(board: string[][]): boolean {\n  const seen = new Set();\n  // check rows, cols and sub-boxes\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      const number = board[i][j];\n      if (number !== '.') {\n        const row = `${number} in row ${i}`;\n        const col = `${number} in col ${j}`;\n        const subBox = `${number} in sub-box ${Math.floor(i / 3)}-${Math.floor(j / 3)}`;\n        // check if the number is already seen in the row, col or sub-box\n        if (seen.has(row) || seen.has(col) || seen.has(subBox)) return false;\n        // add the number to the seen set\n        seen.add(row);\n        seen.add(col);\n        seen.add(subBox);\n      }\n    }\n  }\n  return true;\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8450:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/image-43389f2805f28ab8a95609c8e498edf4.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var o=t(7294);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);