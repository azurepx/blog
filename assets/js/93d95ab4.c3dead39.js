"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1246],{8067:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var s=t(5893),r=t(1151);const o={title:"202. Happy Number",tags:["math","hash table","fast-slow-pointer"]},a=void 0,i={id:"Leetcode/happy-number/index",title:"202. Happy Number",description:"Problem on Leetcode",source:"@site/docs/Leetcode/202-happy-number/index.md",sourceDirName:"Leetcode/202-happy-number",slug:"/Leetcode/happy-number/",permalink:"/docs/Leetcode/happy-number/",draft:!1,unlisted:!1,tags:[{label:"math",permalink:"/docs/tags/math"},{label:"hash table",permalink:"/docs/tags/hash-table"},{label:"fast-slow-pointer",permalink:"/docs/tags/fast-slow-pointer"}],version:"current",lastUpdatedAt:1711686030,formattedLastUpdatedAt:"Mar 29, 2024",frontMatter:{title:"202. Happy Number",tags:["math","hash table","fast-slow-pointer"]},sidebar:"tutorialSidebar",previous:{title:"167. Two Sum II - Input array is sorted",permalink:"/docs/Leetcode/two-sum-ii-input-array-sorted/"},next:{title:"205. Isomorphic Strings",permalink:"/docs/Leetcode/isomorphic-strings/"}},l={},p=[];function u(n){const e={a:"a",code:"code",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://leetcode.com/problems/happy-number/",children:(0,s.jsx)(e.img,{src:"https://img.shields.io/badge/Leetcode-FFA116",alt:"Problem on Leetcode"})})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.img,{src:"https://img.shields.io/badge/Difficulty-Easy-5BCEFA.svg",alt:"easy"}),(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(e.p,{children:"Write an algorithm to determine if a number n is happy."}),"\n",(0,s.jsx)(e.p,{children:"A happy number is a number defined by the following process:"}),"\n",(0,s.jsx)(e.p,{children:"Starting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\nReturn true if n is a happy number, and false if not."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example 1:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example 2:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Input: n = 2\nOutput: false\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Constraints:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"1 <= n <= 231 - 1\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Solutions"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// Method 1: recursive\n// Time Complexity: O(log n)\n// Space Complexity: O(log n)\nfunction isHappy(n: number): boolean {\n  return n <= 4? n === 1: isHappy(bitSquareSum(n));\n};\n\nconst bitSquareSum = (n: number): number => {\n  let sum = 0;\n\n  while (n > 0) {\n    sum += Math.pow(n % 10, 2);\n    n = Math.floor(n / 10);\n  }\n\n  return sum;\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// Method 2: using hash table\n// Time Complexity: O(log n)\n// Space Complexity: O(log n)\nvar isHappy = function(n) {\n  const seen = new Set;\n\n  while (n !== 1) {\n    seen.add(n);\n    n = bitSquareSum(n);\n    if (seen.has(n)) return false;\n  }\n\n  return true;\n};\n\nconst bitSquareSum = (n: number): number => {\n  let sum = 0;\n\n  while (n > 0) {\n    sum += Math.pow(n % 10, 2);\n    n = Math.floor(n / 10);   \n  }\n\n  return sum;\n}\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"// Method 3: using fast-slow pointer\n// Time Complexity: O(log n)\n// Space Complexity: O(1)\nvar isHappy = function(n) {\n  let slow = n;\n  let fast = bitSquareSum(n);\n\n  while (fast !== 1 && slow !== fast) {\n    slow = bitSquareSum(slow);\n    fast = bitSquareSum(bitSquareSum(fast));\n  }\n\n  return fast === 1;\n};\n\nconst bitSquareSum = (n: number): number => {\n  let sum = 0;\n\n  while (n > 0) {\n    sum += Math.pow(n % 10, 2);\n    n = Math.floor(n / 10);   \n  }\n\n  return sum;\n}\n"})})]})}function c(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>a});var s=t(7294);const r={},o=s.createContext(r);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);